tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.diamond.collectors
  template_version: 2.2.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:2.2.0-SM9
  - org.alien4cloud.monitoring.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.elasticsearch.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.diamond.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.diamond.agent_linux:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.hostpool.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.java.jmx.jolokia:2.2.0-SNAPSHOT
  - org.alien4cloud.rabbitmq.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.postgresql.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.manager.pub:2.2.0-SNAPSHOT

node_types:
  org.alien4cloud.diamond.collectors.nodes.ElasticSearchCollector:
    derived_from: org.alien4cloud.diamond.pub.nodes.DiamondCollector
    description: Collect elasticsearch health metrics.
    requirements:
      - collec_elasticsearch:
          capability: org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI
          relationship: org.alien4cloud.diamond.collectors.relationships.DiamondCollectElasticSearch
          occurrences: [0, 1]
      - diamond:
          capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
          relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
          occurrences: [1, 1]
  org.alien4cloud.diamond.collectors.nodes.JolokiaCollector:
    derived_from: org.alien4cloud.diamond.pub.nodes.DiamondCollector
    description: Collect a JVM health metrics (need a jolokia java agent the target JVM).
    requirements:
      - collec_jolokia:
          capability: org.alien4cloud.java.jmx.jolokia.capabilities.JolokiaEndpoint
          relationship: org.alien4cloud.diamond.collectors.relationships.DiamondJolokiaCollector
          occurrences: [0, 1]
      - diamond:
          capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
          relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
          occurrences: [1, 1]
  org.alien4cloud.diamond.collectors.nodes.A4CCollector:
    derived_from: org.alien4cloud.diamond.collectors.nodes.JolokiaCollector
    description: Collect A4C JVM metrics.
    requirements:
      - collec_jolokia:
          capability: org.alien4cloud.java.jmx.jolokia.capabilities.JolokiaEndpoint
          relationship: org.alien4cloud.diamond.collectors.relationships.DiamondA4CCollector
          occurrences: [0, 1]
  org.alien4cloud.diamond.collectors.nodes.RabbitmqCollector:
    derived_from: org.alien4cloud.diamond.pub.nodes.DiamondCollector
    description: Collect RabbitMQ metrics.
    requirements:
      - collec_rabbitmq:
          capability: org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint
          relationship: org.alien4cloud.diamond.collectors.relationships.DiamondRabbitmqCollector
          occurrences: [0, 1]
      - diamond:
          capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
          relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
          occurrences: [1, 1]
  org.alien4cloud.diamond.collectors.nodes.PostgresqlCollector:
    derived_from: org.alien4cloud.diamond.pub.nodes.DiamondCollector
    description: Collect RabbitMQ metrics.
    requirements:
      - collec_postgresql:
          capability: org.alien4cloud.postgresql.pub.PostgresqlEndpoint
          relationship: org.alien4cloud.diamond.collectors.relationships.DiamondPostgresqlCollector
          occurrences: [0, 1]
      - diamond:
          capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
          relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
          occurrences: [1, 1]
  org.alien4cloud.diamond.collectors.nodes.CloudifyCollector:
    derived_from: org.alien4cloud.diamond.pub.nodes.DiamondCollector
    description: Collects cloudify manager indicators eg. mgmtworker count ...
    requirements:
      - collect_cloudify:
          capability: org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint
          relationship: org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyCollector
          occurrences: [0, 1]
      - diamond:
          capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
          relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
          occurrences: [1, 1]
  org.alien4cloud.diamond.collectors.nodes.CloudifyHostpoolCollector:
    derived_from: org.alien4cloud.diamond.pub.nodes.DiamondCollector
    description: Collects indicator concerning hostpool eg. (allocated) instances count.
    requirements:
      - cloudify_hostpool:
          capability: org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
          relationship: org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector
          occurrences: [0, 1]
      - diamond:
          capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
          relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
          occurrences: [1, 1]

relationship_types:
  org.alien4cloud.diamond.collectors.relationships.DiamondCollectElasticSearch:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_elasticsearch.yml
            datasource_name: { get_attribute: [SOURCE, datasource_name] }
            collectors_conf_path: { get_attribute: [SOURCE, collectors_conf_path] }
            dashboard_dir: { get_attribute: [SOURCE, dashboard_dir] }
            elasticsearch_host: { get_attribute: [TARGET, http, ip_address] }
            elasticsearch_port: { get_attribute: [TARGET, http, port] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.diamond.collectors.relationships.DiamondJolokiaCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.java.jmx.jolokia.capabilities.JolokiaEndpoint ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_jolokia.yml
            datasource_name: { get_attribute: [SOURCE, datasource_name] }
            collectors_conf_path: { get_attribute: [SOURCE, collectors_conf_path] }
            dashboard_dir: { get_attribute: [SOURCE, dashboard_dir] }
            jolokia_host: { get_attribute: [TARGET, ip_address] }
            jolokia_port: { get_attribute: [TARGET, jolokia, port] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.diamond.collectors.relationships.DiamondRabbitmqCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_rabbitmq.yml
            datasource_name: { get_attribute: [SOURCE, datasource_name] }
            collectors_conf_path: { get_attribute: [SOURCE, collectors_conf_path] }
            dashboard_dir: { get_attribute: [SOURCE, dashboard_dir] }
            rabbitmq_port: { get_attribute: [TARGET, rabbitmq_management, port] }
            rabbitmq_user: { get_attribute: [TARGET, rabbitmq_management, user] }
            rabbitmq_password: { get_attribute: [TARGET, rabbitmq_management, password] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.diamond.collectors.relationships.DiamondPostgresqlCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.postgresql.pub.PostgresqlEndpoint ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_postgresql.yml
            datasource_name: { get_attribute: [SOURCE, datasource_name] }
            collectors_conf_path: { get_attribute: [SOURCE, collectors_conf_path] }
            dashboard_dir: { get_attribute: [SOURCE, dashboard_dir] }
            postgresql_port: { get_attribute: [TARGET, postgresql, port] }
            postgresql_user: { get_attribute: [TARGET, postgresql, user] }
            postgresql_password: { get_attribute: [TARGET, postgresql, password] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.diamond.collectors.relationships.DiamondA4CCollector:
    derived_from: org.alien4cloud.diamond.collectors.relationships.DiamondJolokiaCollector
    valid_target_types: [ org.alien4cloud.alien4cloud.pub.capabilities.JolokiaA4CEndpoint ]
    interfaces:
      Configure:
        pre_configure_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_alien.yml
            datasource_name: { get_attribute: [SOURCE, datasource_name] }
            collectors_conf_path: { get_attribute: [SOURCE, collectors_conf_path] }
            dashboard_dir: { get_attribute: [SOURCE, dashboard_dir] }
            jolokia_host: { get_attribute: [TARGET, jolokia, ip_address] }
            alien_data_dir: { get_property: [TARGET, data_dir] }
            jolokia_port: { get_property: [TARGET, jolokia, port] }
          implementation: playbook/playbook.ansible
  # TODO: TOSCA refactor in CustomCollector
  org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint ]
    properties:
      collector_name:
        type: string
        default: CloudifyCollector
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_custom.yml
            datasource_name: { get_attribute: [SOURCE, datasource_name] }
            collectors_conf_path: { get_attribute: [SOURCE, collectors_conf_path] }
            dashboard_dir: { get_attribute: [SOURCE, dashboard_dir] }
            collector_name: { get_property: [SELF, collector_name] }
          implementation: playbook/playbook.ansible
        pre_configure_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: install_custom_collector.yml
            collectors_path: { get_attribute: [SOURCE, collectors_path] }
            collector_name: { get_property: [SELF, collector_name] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi ]
    properties:
      collector_name:
        type: string
        default: CloudifyHostpoolCollector
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_custom.yml
            datasource_name: { get_attribute: [SOURCE, datasource_name] }
            collectors_conf_path: { get_attribute: [SOURCE, collectors_conf_path] }
            dashboard_dir: { get_attribute: [SOURCE, dashboard_dir] }
            collector_name: { get_property: [SELF, collector_name] }
          implementation: playbook/playbook.ansible
        pre_configure_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: install_custom_collector.yml
            collectors_path: { get_attribute: [SOURCE, collectors_path] }
            collector_name: { get_property: [SELF, collector_name] }
            hostpool_url: { concat: [get_property: [TARGET, cloudify_hostpool, protocol], "://", get_attribute: [TARGET, cloudify_hostpool, ip_address], ":", get_property: [TARGET, cloudify_hostpool, port]] }
          implementation: playbook/playbook.ansible
