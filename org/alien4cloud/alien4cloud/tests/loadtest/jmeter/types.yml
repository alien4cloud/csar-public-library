tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.alien4cloud.tests.loadtest.jmeter
  template_version: 2.2.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:2.2.0-SM9
  - org.alien4cloud.mock.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.java.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.alien4cloud.pub:2.2.0-SNAPSHOT

description: >
  Mock types for A4C load tests.

node_types:

  org.alien4cloud.alien4cloud.tests.loadtest.nodes.JMeterTestLauncher:
    description: |
      A software component that hosts MockComponent.
    derived_from: org.alien4cloud.java.pub.nodes.JavaSoftware
    properties:
      rampup:
        type: string
        description: "A CSV list of user count for rampup (ex: 10,20,50,100)"
        default: 10,20,30,40,50
        required: true
      test_name_prefix:
        type: string
        description: >
          A prefix for naming the test. Will be used with the launch date and the user count when executing the test.
          The test name is used to name result and log files and application in target A4C so just use Word chars please.
        default: LoadTest
        required: true
      loop_count:
        type: integer
        description: In conjonction with a single value rampup, you can loop.
        default: 1
        required: true
    # requirements:
    #   - alien_rest_api:
    #       capability: org.alien4cloud.alien4cloud.pub.capabilities.A4cRestApi
    #       relationship: org.alien4cloud.alien4cloud.tests.loadtest.relationships.LoadtestConnectToAlien
    #       occurrences: [ 1, 1 ]
    interfaces:
      Standard:
        create:
          # install jmeter, download jmeter test (or give it as an artifact)
          # ensure log file is present
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: operation.yml
            operation: "create AnsibleMockHost"
            duration: { get_property: [ SELF, duration ] }
            variation: { get_property: [ SELF, variation ] }
            weight: 50
            log_length: { get_property: [ SELF, log_length ] }
          implementation: playbook/playbook.ansible
        configure:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: operation.yml
            operation: "configure AnsibleMockHost"
            duration: { get_property: [ SELF, duration ] }
            variation: { get_property: [ SELF, variation ] }
            weight: 30
            sleep_factor: { get_property: [ SELF, sleep_factor ] }
            log_length: { get_property: [ SELF, log_length ] }
          implementation: playbook/playbook.ansible
        start:
          # run the test, we will also expose a custom command so delegate with appropriate value.
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: operation.yml
            operation: "start AnsibleMockHost"
            duration: { get_property: [ SELF, duration ] }
            variation: { get_property: [ SELF, variation ] }
            weight: 20
            log_length: { get_property: [ SELF, log_length ] }
          implementation: playbook/playbook.ansible
        stop:
          # kill the java process
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: operation.yml
            operation: "stop AnsibleMockHost"
            duration: { get_property: [ SELF, duration ] }
            variation: { get_property: [ SELF, variation ] }
            weight: 20
            log_length: { get_property: [ SELF, log_length ] }
          implementation: playbook/playbook.ansible


# relationship_types:

  # org.alien4cloud.mock.ansible.relationships.AnsibleComponentConnectToComponent:
  #   derived_from: org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent
  #   valid_target_types: [ org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint ]
  #   interfaces:
  #     configure:
  #       pre_configure_source:
  #         inputs:
  #           ANSIBLE_VERBOSE: true
  #           PLAYBOOK_ENTRY: operation.yml
  #           operation: "pre_configure_source AnsibleComponentConnectToComponent"
  #           duration: 2
  #           variation: { get_property: [ SOURCE, variation ] }
  #           weight: 30
  #           log_length: { get_property: [ SOURCE, log_length ] }
  #         implementation: playbook/playbook.ansible
  #       pre_configure_target:
  #         inputs:
  #           ANSIBLE_VERBOSE: true
  #           PLAYBOOK_ENTRY: operation.yml
  #           operation: "pre_configure_target AnsibleComponentConnectToComponent"
  #           duration: 2
  #           variation: { get_property: [ SOURCE, variation ] }
  #           weight: 30
  #           log_length: { get_property: [ SOURCE, log_length ] }
  #         implementation: playbook/playbook.ansible
  #       post_configure_source:
  #         inputs:
  #           ANSIBLE_VERBOSE: true
  #           PLAYBOOK_ENTRY: operation.yml
  #           operation: "post_configure_source AnsibleComponentConnectToComponent"
  #           duration: 2
  #           variation: { get_property: [ SOURCE, variation ] }
  #           weight: 30
  #           log_length: { get_property: [ SOURCE, log_length ] }
  #         implementation: playbook/playbook.ansible
  #       post_configure_target:
  #         inputs:
  #           ANSIBLE_VERBOSE: true
  #           PLAYBOOK_ENTRY: operation.yml
  #           operation: "post_configure_target AnsibleComponentConnectToComponent"
  #           duration: 2
  #           variation: { get_property: [ SOURCE, variation ] }
  #           weight: 30
  #           log_length: { get_property: [ SOURCE, log_length ] }
  #         implementation: playbook/playbook.ansible
  #       add_target:
  #         inputs:
  #           ANSIBLE_VERBOSE: true
  #           PLAYBOOK_ENTRY: operation.yml
  #           operation: "add_target AnsibleComponentConnectToComponent"
  #           duration: 2
  #           variation: { get_property: [ SOURCE, variation ] }
  #           weight: 30
  #           log_length: { get_property: [ SOURCE, log_length ] }
  #         implementation: playbook/playbook.ansible
  #       add_source:
  #         inputs:
  #           ANSIBLE_VERBOSE: true
  #           PLAYBOOK_ENTRY: operation.yml
  #           operation: "add_source AnsibleComponentConnectToComponent"
  #           duration: 2
  #           variation: { get_property: [ SOURCE, variation ] }
  #           weight: 30
  #           log_length: { get_property: [ SOURCE, log_length ] }
  #         implementation: playbook/playbook.ansible
        # remove_target:
        #   inputs:
        #     ANSIBLE_VERBOSE: true
        #     PLAYBOOK_ENTRY: operation.yml
        #     operation: "remove_target AnsibleComponentConnectToComponent"
        #     sleep_time: 5
        #     sleep_factor: { get_property: [ SOURCE, sleep_factor ] }
        #     log_length: { get_property: [ SOURCE, log_length ] }
        #   implementation: playbook/playbook.ansible
        # remove_source:
        #   inputs:
        #     ANSIBLE_VERBOSE: true
        #     PLAYBOOK_ENTRY: operation.yml
        #     operation: "remove_source AnsibleComponentConnectToComponent"
        #     sleep_time: 5
        #     sleep_factor: { get_property: [ SOURCE, sleep_factor ] }
        #     log_length: { get_property: [ SOURCE, log_length ] }
        #   implementation: playbook/playbook.ansible
