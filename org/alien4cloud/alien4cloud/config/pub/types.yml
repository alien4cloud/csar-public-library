tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.alien4cloud.config.pub
  template_version: 2.2.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - alien-base-types:2.2.0-SM9
  - org.alien4cloud.alien4cloud.pub:2.2.0-SNAPSHOT
  - tosca-normative-types:1.0.0-ALIEN20

node_types:
  org.alien4cloud.alien4cloud.config.pub.nodes.OrchestratorConfigurator:
    derived_from: org.alien4cloud.alien4cloud.pub.nodes.AlienConfigurator
    abstract: true
    description: |
      Configure an orchestrator for A4C
    properties:
      name:
        type: string
        required: true
        default: MyOrchestrator
      discriminator:
        type: string
        description: a prefix for all deployments
        required: true
        default: YourInitials
      pluginId:
        type: string
        required: true
        default: alien-cloudify-4-orchestrator-premium
      pluginBean:
        type: string
        required: true
        default: cloudify-orchestrator
    attributes:
      orchestratorId: { get_operation_output: [ SELF, Standard, start, orchestratorId ] }
      alien_url: { get_attribute: [HOST, alien_url] }
      alien_user: { get_property: [HOST, rest, user] }
      alien_password: { get_property: [HOST, rest, password] }
    capabilities:
      location_config:
        type: org.alien4cloud.alien4cloud.config.pub.capabilities.OrchestratorConfigurator
        occurrences: [ 0, UNBOUNDED ]

  org.alien4cloud.alien4cloud.config.pub.nodes.LocationConfigurator:
    derived_from: tosca.nodes.Root
    abstract: true
    description: |
      Configure a location for an A4C orchestrator
    tags:
      icon: /images/config.png
    properties:
      name:
        type: string
        required: true
        default: MyLocation
      type:
        type: string
        required: true
        default: byon
    attributes:
      locationId: { get_operation_output: [ SELF, Standard, create, locationId ] }
    requirements:
      - orchestrator:
          capability: org.alien4cloud.alien4cloud.config.pub.capabilities.OrchestratorConfigurator
          relationship: org.alien4cloud.alien4cloud.config.pub.relationships.LocationHostedOnOrchestrator
          occurrences: [1, 1]
    # interfaces:
    #   Standard:
    #     create:
    #       # create the location
    #       inputs:
    #         ANSIBLE_VERBOSE: false
    #         PLAYBOOK_ENTRY: create_location.yml
    #         location_name: { get_property: [SELF, name] }
    #         location_type: { get_property: [SELF, type] }
    #         orchestratorId: { get_attribute: [HOST, orchestratorId] }
    #         alien_url: { get_attribute: [HOST, alien_url] }
    #         alien_user: { get_attribute: [HOST, alien_user] }
    #         alien_password: { get_attribute: [HOST, alien_password] }
    #       implementation: playbook/playbook.ansible

capability_types:
  org.alien4cloud.alien4cloud.config.pub.capabilities.OrchestratorConfigurator:
    derived_from: tosca.capabilities.Container

relationship_types:
  org.alien4cloud.alien4cloud.config.pub.relationships.LocationHostedOnOrchestrator:
    derived_from: tosca.relationships.HostedOn
