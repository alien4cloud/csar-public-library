tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.alien4cloud.config.orchestrator.cfy
  template_version: 2.2.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - alien-base-types:2.2.0-SM9
  - org.alien4cloud.alien4cloud.config.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.manager.pub:2.2.0-SNAPSHOT
  - tosca-normative-types:1.0.0-ALIEN20

node_types:

  org.alien4cloud.alien4cloud.config.orchestrator.cfy.nodes.CfyOrchestratorConfigurator:
    description: |
      Configure a CFY orchestrator for A4C
    derived_from: org.alien4cloud.alien4cloud.config.pub.nodes.OrchestratorConfigurator
    properties:
      disableDiamondMonitorAgent:
        type: boolean
        required: true
        default: true
    requirements:
      - cfy:
          capability: org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3
          relationship: org.alien4cloud.alien4cloud.config.orchestrator.cfy.relationships.ConnectsToCfy
          occurrences: [1, 1]
    attributes:
      orchestratorId: { get_operation_output: [ SELF, Standard, start, orchestratorId ] }
    interfaces:
      Standard:
        start:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: create_orchestrator.yml
            name: { get_property: [SELF, name] }
            pluginId: { get_property: [SELF, pluginId] }
            pluginBean: { get_property: [SELF, pluginBean] }
            disableDiamondMonitorAgent: { get_property: [SELF, disableDiamondMonitorAgent] }
            alien_user: { get_property: [HOST, rest, user] }
            alien_password: { get_property: [HOST, rest, password] }
            alien_url: { get_attribute: [HOST, alien_url] }
            discriminator: { get_property: [SELF, discriminator] }
          implementation: playbook/playbook.ansible

relationship_types:

  org.alien4cloud.alien4cloud.config.orchestrator.cfy.relationships.ConnectsToCfy:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3 ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: connect_cfy.yml
            cfy_user: { get_property: [TARGET, cloudify_api_v3, admin_username] }
            cfy_password: { get_property: [TARGET, cloudify_api_v3, admin_password] }
            cfy_url: { concat: [get_property: [TARGET, cloudify_api_v3, protocol], "://", get_attribute: [TARGET, cloudify_api_v3, ip_address], ":", get_property: [TARGET, cloudify_api_v3, port]] }
          implementation: playbook/playbook.ansible
