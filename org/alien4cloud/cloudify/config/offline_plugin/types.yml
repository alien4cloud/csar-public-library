tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.cloudify.config.offline_plugin
  template_version: 2.2.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - alien-base-types:2.2.0-SM9
  - tosca-normative-types:1.0.0-ALIEN20
  - org.alien4cloud.apache.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.manager.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.alien4cloud.pub:2.2.0-SNAPSHOT

node_types:

  org.alien4cloud.cloudify.config.offline_plugin.nodes.PluginConfigurator:
    derived_from: org.alien4cloud.apache.pub.nodes.WebApplication
    description: >
      The TOSCA Apache Node Type represents an apache component
      that can be managed and run by a TOSCA Compute Node Type.
    tags:
      icon: /images/config.png
    properties:
      plugin_archive_url:
        type: string
        required: true
        default: https://gigaspaces-repository-eu.s3.amazonaws.com/cloudify/wagons/cloudify-host-pool-plugin/1.5/cloudify_host_pool_plugin-1.5-py27-none-linux_x86_64-centos-Core.wgn
    # attributes:
    #   offline_plugin_url: { get_operation_output: [ SELF, Standard, create, offline_plugin_url ] }
    requirements:
      - cfy:
          capability: org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3
          relationship: org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToCfy
          occurrences: [1, 1]
      - alien:
          capability: org.alien4cloud.alien4cloud.pub.capabilities.A4cRestApi
          relationship: org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToA4C
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: create.yml
            document_root: { get_property: [HOST, document_root] }
            offline_ip: { get_attribute: [HOST, ip_address] }
            offline_port: { get_property: [HOST, data_endpoint, port] }
          implementation: playbook/playbook.ansible

relationship_types:

  org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToCfy:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3 ]
    interfaces:
      Configure:
        add_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: connect_cfy.yml
            plugin_archive_url: { get_property: [SOURCE, plugin_archive_url] }
            cfy_user: { get_property: [TARGET, cloudify_api_v3, admin_username] }
            cfy_password: { get_property: [TARGET, cloudify_api_v3, admin_password] }
            cfy_url: { concat: [get_property: [TARGET, cloudify_api_v3, protocol], "://", get_attribute: [TARGET, cloudify_api_v3, ip_address], ":", get_property: [TARGET, cloudify_api_v3, port]] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToA4C:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.alien4cloud.pub.capabilities.A4cRestApi ]
    interfaces:
      Configure:
        add_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: connect_a4c.yml
            # offline_plugin_url: { get_attribute: [SOURCE, offline_plugin_url] }
            alien_user: { get_property: [TARGET, rest, user] }
            alien_password: { get_property: [TARGET, rest, password] }
            alien_url: { concat: [get_property: [TARGET, rest, protocol], "://", get_attribute: [TARGET, rest, ip_address], ":", get_property: [TARGET, rest, port]] }
          implementation: playbook/playbook.ansible
