tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.cloudify.topologies.cfy4_hp_aws
  template_version: 2.2.0-SNAPSHOT
  template_author: alien4cloud

description: >
  A monitored Cloudify 4 manager configured for AWS (with Ansible) and a Hostpool.
  Also embed a HostpoolFeeder that can instanciate EC2 instances and feed the hostpool.
  The workflow has been changed to ensure the hostpool is installed at the end of the deploy (to avoid issue with cfy bootstrap that needs port 8080).
  Instances are shutdown at uninstall workflow (but you can also use custom command to operate).
  Has been tested on a Centos ami-4c4b003b (m4.large).

imports:
  - org.alien4cloud.cloudify.hostpool.service:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.hostpool.awsfeeder:2.2.0-SNAPSHOT
  - org.alien4cloud.graphite.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.grafana.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.manager.v4:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.manager.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.diamond.pub:2.2.0-SNAPSHOT
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:2.2.0-SM9
  - org.alien4cloud.java.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.diamond.collectors:2.2.0-SNAPSHOT
  - org.alien4cloud.java.jmx.jolokia:2.2.0-SNAPSHOT
  - org.alien4cloud.diamond.agent_linux:2.2.0-SNAPSHOT
  - org.alien4cloud.elasticsearch.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.ansible:2.2.0-SNAPSHOT
  - org.alien4cloud.cloudify.hostpool.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.alien4cloud.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.postgresql.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.rabbitmq.pub:2.2.0-SNAPSHOT

topology_template:
  description: >
    A monitored Cloudify 4 manager configured for AWS (with Ansible) and a Hostpool.
    Also embed a HostpoolFeeder that can instanciate EC2 instances and feed the hostpool.
    The workflow has been changed to ensure the hostpool is installed at the end of the deploy (to avoid issue with cfy bootstrap that needs port 8080).
    Instances are shutdown at uninstall workflow (but you can also use custom command to operate).
    Has been tested on a Centos ami-4c4b003b (m4.large).

  inputs:
    aws_region:
      type: string
      required: true
      default: "eu-west-1"
      description: "The aws region to use to start aws instances."
    aws_access_key:
      type: string
      required: true
      description: "The aws access key of the account to use to start aws instances."
    aws_secret_key:
      type: string
      required: true
      description: "The aws secret key of the account to use to start aws instances."
    aws_keypair_name:
      type: string
      required: false
      description: "Optional name of the key as known by the iaas (in case of iaas key)."
    agent_security_groups:
      type: string
      required: true
      default: "sg-cffd98b6"
      description: "Comma separated list of security groups to use for agents."
    component_version:
      type: version
      required: false
      description: "The optional software componentâ€™s version."
    instance_name:
      type: string
      required: true
      default: HostpoolInstance
      description: "The AWS instance name"
    aws_key_content:
      type: string
      required: true
      description: "The AWS key"
  input_artifacts:
    key_file:
        type: tosca.artifacts.File
    hostpool_service_archive:
        type: tosca.artifacts.File
  substitution_mappings:
    node_type: org.alien4cloud.cloudify.manager.pub.nodes.CloudifyManagerService
    capabilities:
      cloudify_api_v3: [ CloudifyManager, cloudify_api_v3 ]
      cloudify_hostpool: [ HostPool, cloudify_hostpool ]
  node_templates:
    CloudifyManager:
      type: org.alien4cloud.cloudify.manager.v4.nodes.CloudifyManager
      properties:
        ssh_user: "ec2-user"
        ssh_key_filename: "aws-key.pem"
        keypair_name: { get_input: aws_keypair_name }
        agents_user: ubuntu
        component_version: "4.0.1-ga"
      requirements:
        - host:
            node: _CfyCompute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        rabbitmq_management:
          properties:
            user: cloudify
            password: c10udify
            protocol: http
            port: 15672
            secure: false
            network_name: PRIVATE
            initiator: source
        postgresql:
          properties:
            user: cloudify
            password: cloudify
            protocol: tcp
            port: 5432
            secure: false
            network_name: PRIVATE
            initiator: source
        diamond_collector:
          properties:
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        cloudify_api_v3:
          properties:
            admin_username: admin
            admin_password: admin
            protocol: https
            port: 443
            secure: false
            network_name: PRIVATE
            initiator: source
      artifacts:
        key_file:
          file: { get_input_artifact: key_file }
          type: tosca.artifacts.File
    CloudifyAwsConfiguration:
      type: org.alien4cloud.cloudify.manager.v4.nodes.CloudifyAwsConfiguration
      properties:
        aws_access_key: { get_input: aws_access_key }
        aws_secret_key: { get_input: aws_secret_key }
        aws_region: { get_input: aws_region }
        agent_security_groups: { get_input: agent_security_groups }
      requirements:
        - cfy_manager:
            node: CloudifyManager
            capability: org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyManagerContainer
            relationship: tosca.relationships.HostedOn
    Ansible4CloudifyManager:
      type: org.alien4cloud.cloudify.ansible.nodes.Ansible4CloudifyManager
      properties:
        component_version: "2.0.1.0"
      requirements:
        - host:
            node: _CfyCompute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    HostPool:
      type: org.alien4cloud.cloudify.hostpool.service.nodes.HostPool
      requirements:
        - host:
            node: _CfyCompute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        cloudify_hostpool:
          properties:
            protocol: http
            port: 8080
            secure: false
            network_name: PRIVATE
            initiator: source
      artifacts:
        archive:
          file: { get_input_artifact: hostpool_service_archive }
          type: tosca.artifacts.File
    AWSHostpoolFeeder:
      type: org.alien4cloud.cloudify.hostpool.awsfeeder.nodes.AWSHostpoolFeeder
      properties:
        aws_access_key: { get_input: aws_access_key }
        aws_secret_key: { get_input: aws_secret_key }
        key_name: { get_input: aws_keypair_name }
        key_content: { get_input: aws_key_content }
        region: "eu-west-1"
        instance_groups: { get_input: agent_security_groups }
        instance_username: ubuntu
        instance_type: "t2.nano"
        instance_image: "ami-47a23a30"
        instance_count: 0
        host_per_instance: 1
        instance_name: { get_input: instance_name }
        instance_os: linux
      requirements:
        - hostpool:
            node: HostPool
            capability: org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
            relationship: org.alien4cloud.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool
        - host:
            node: _CfyCompute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    _CfyCompute:
      type: tosca.nodes.Compute
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: "4 GIB"
        os:
          properties:
            architecture: "x86_64"
            type: linux
            distribution: centos
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    GrafanaService:
      type: org.alien4cloud.grafana.pub.nodes.GrafanaService
      capabilities:
        http_endpoint:
          properties:
            user: admin
            password: admin
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
    GraphiteService:
      type: org.alien4cloud.graphite.pub.nodes.GraphiteService
      capabilities:
        data_endpoint:
          properties:
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        http_endpoint:
          properties:
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
    dmdCfy:
      type: org.alien4cloud.diamond.agent_linux.nodes.DiamondLinuxAgent
      properties:
        datasource_name: "Graphite_DS"
        collectors_path: "/opt/ansible_diamond/env/share/diamond/collectors"
        collectors_conf_path: "/etc/ansible_diamond/collectors"
      requirements:
        - data_endpoint:
            node: GraphiteService
            capability: org.alien4cloud.graphite.pub.capabilities.GraphiteDataEndpoint
            relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGraphite
        - host:
            node: _CfyCompute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
        - grafana:
            node: GrafanaService
            capability: org.alien4cloud.grafana.pub.capabilities.GrafanaHttpEndpoint
            relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGrafana
    CloudifyCollector:
      type: org.alien4cloud.diamond.collectors.nodes.CloudifyCollector
      requirements:
        - collect_cloudify:
            node: CloudifyManager
            capability: org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint
            relationship: org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyCollector
            properties:
              collector_name: CloudifyCollector
        - diamond:
            node: dmdCfy
            capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
            relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
    RabbitmqCollector:
      type: org.alien4cloud.diamond.collectors.nodes.RabbitmqCollector
      requirements:
        - collec_rabbitmq:
            node: CloudifyManager
            capability: org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint
            relationship: org.alien4cloud.diamond.collectors.relationships.DiamondRabbitmqCollector
        - diamond:
            node: dmdCfy
            capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
            relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
    CloudifyHostpoolCollector:
      type: org.alien4cloud.diamond.collectors.nodes.CloudifyHostpoolCollector
      requirements:
        - diamond:
            node: dmdCfy
            capability: org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer
            relationship: org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent
        - cloudify_hostpool:
            node: HostPool
            capability: org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
            relationship: org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector
            properties:
              collector_name: CloudifyHostpoolCollector
  outputs:
    CloudifyManager_manager_url:
      value: { get_attribute: [ CloudifyManager, manager_url ] }
  workflows:
    install:
      steps:
        Ansible4CloudifyManager_configured:
          target: Ansible4CloudifyManager
          activities:
            - set_state: configured
          on_success:
            - Ansible4CloudifyManager_starting
        CloudifyAwsConfiguration_initial:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: initial
          on_success:
            - CloudifyAwsConfiguration_creating
        AWSHostpoolFeeder_created:
          target: AWSHostpoolFeeder
          activities:
            - set_state: created
          on_success:
            - HostPool_configuring
            - HostPool_initial
            - AWSHostpoolFeeder_configuring
        dmdCfy_created:
          target: dmdCfy
          activities:
            - set_state: created
          on_success:
            - dmdCfy_configuring
        create_CloudifyAwsConfiguration:
          target: CloudifyAwsConfiguration
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on_success:
            - CloudifyAwsConfiguration_created
        RabbitmqCollector_configured:
          target: RabbitmqCollector
          activities:
            - set_state: configured
          on_success:
            - RabbitmqCollector_starting
        start_HostPool:
          target: HostPool
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - HostPool_started
        CloudifyHostpoolCollector_initial:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: initial
          on_success:
            - CloudifyHostpoolCollector_creating
        CloudifyManager_configuring:
          target: CloudifyManager
          activities:
            - set_state: configuring
          on_success:
            - configure_CloudifyManager
        CloudifyManager_starting:
          target: CloudifyManager
          activities:
            - set_state: starting
          on_success:
            - start_CloudifyManager
        create_CloudifyManager:
          target: CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on_success:
            - CloudifyManager_created
        CloudifyHostpoolCollector_started:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: started
          on_success:
            - Ansible4CloudifyManager_initial
        dmdCfy_starting:
          target: dmdCfy
          activities:
            - set_state: starting
          on_success:
            - start_dmdCfy
        configure_HostPool:
          target: HostPool
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - HostPool_configured
        RabbitmqCollector_creating:
          target: RabbitmqCollector
          activities:
            - set_state: creating
          on_success:
            - RabbitmqCollector_created
        Ansible4CloudifyManager_configuring:
          target: Ansible4CloudifyManager
          activities:
            - set_state: configuring
          on_success:
            - configure_Ansible4CloudifyManager
        HostPool_creating:
          target: HostPool
          activities:
            - set_state: creating
          on_success:
            - create_HostPool
        HostPool_starting:
          target: HostPool
          activities:
            - set_state: starting
          on_success:
            - start_HostPool
        CloudifyAwsConfiguration_started:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: started
          on_success:
            - CloudifyCollector_configuring
        RabbitmqCollector_starting:
          target: RabbitmqCollector
          activities:
            - set_state: starting
          on_success:
            - start_RabbitmqCollector
        CloudifyAwsConfiguration_configuring:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: configuring
          on_success:
            - configure_CloudifyAwsConfiguration
        AWSHostpoolFeeder_initial:
          target: AWSHostpoolFeeder
          activities:
            - set_state: initial
          on_success:
            - AWSHostpoolFeeder_creating
        CloudifyAwsConfiguration_created:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: created
          on_success:
            - CloudifyAwsConfiguration_configuring
        CloudifyHostpoolCollector_created:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: created
          on_success:
            - HostPool_configuring
            - CloudifyHostpoolCollector_configuring
        CloudifyManager_configured:
          target: CloudifyManager
          activities:
            - set_state: configured
          on_success:
            - CloudifyManager_starting
        AWSHostpoolFeeder_started:
          target: AWSHostpoolFeeder
          activities:
            - set_state: started
          on_success:
            - CloudifyHostpoolCollector_configuring
        CloudifyManager_created:
          target: CloudifyManager
          activities:
            - set_state: created
          on_success:
            - CloudifyManager_configuring
            - RabbitmqCollector_initial
        CloudifyCollector_creating:
          target: CloudifyCollector
          activities:
            - set_state: creating
          on_success:
            - CloudifyCollector_created
        CloudifyCollector_starting:
          target: CloudifyCollector
          activities:
            - set_state: starting
          on_success:
            - start_CloudifyCollector
        start_Ansible4CloudifyManager:
          target: Ansible4CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - Ansible4CloudifyManager_started
        start_CloudifyAwsConfiguration:
          target: CloudifyAwsConfiguration
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - CloudifyAwsConfiguration_started
        CloudifyAwsConfiguration_creating:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: creating
          on_success:
            - create_CloudifyAwsConfiguration
        CloudifyAwsConfiguration_starting:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: starting
          on_success:
            - start_CloudifyAwsConfiguration
        GraphiteService_install:
          target: GraphiteService
          activities:
            - delegate: install
          on_success:
            - dmdCfy_initial
        RabbitmqCollector_created:
          target: RabbitmqCollector
          activities:
            - set_state: created
          on_success:
            - CloudifyManager_configuring
            - RabbitmqCollector_configuring
            - CloudifyCollector_initial
        HostPool_initial:
          target: HostPool
          activities:
            - set_state: initial
          on_success:
            - HostPool_creating
        start_AWSHostpoolFeeder:
          target: AWSHostpoolFeeder
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - AWSHostpoolFeeder_started
        CloudifyAwsConfiguration_configured:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: configured
          on_success:
            - CloudifyAwsConfiguration_starting
        AWSHostpoolFeeder_configuring:
          target: AWSHostpoolFeeder
          activities:
            - set_state: configuring
          on_success:
            - configure_AWSHostpoolFeeder
        start_CloudifyCollector:
          target: CloudifyCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - CloudifyCollector_started
        start_RabbitmqCollector:
          target: RabbitmqCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - RabbitmqCollector_started
        start_CloudifyHostpoolCollector:
          target: CloudifyHostpoolCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - CloudifyHostpoolCollector_started
        CloudifyCollector_created:
          target: CloudifyCollector
          activities:
            - set_state: created
          on_success:
            - CloudifyManager_configuring
            - CloudifyCollector_configuring
        Ansible4CloudifyManager_started:
          target: Ansible4CloudifyManager
          activities:
            - set_state: started
        HostPool_created:
          target: HostPool
          activities:
            - set_state: created
          on_success:
            - CloudifyHostpoolCollector_initial
            - HostPool_configuring
        Ansible4CloudifyManager_created:
          target: Ansible4CloudifyManager
          activities:
            - set_state: created
          on_success:
            - Ansible4CloudifyManager_configuring
        CloudifyCollector_started:
          target: CloudifyCollector
          activities:
            - set_state: started
          on_success:
            - RabbitmqCollector_configuring
        AWSHostpoolFeeder_starting:
          target: AWSHostpoolFeeder
          activities:
            - set_state: starting
          on_success:
            - start_AWSHostpoolFeeder
        CloudifyHostpoolCollector_creating:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: creating
          on_success:
            - CloudifyHostpoolCollector_created
        configure_Ansible4CloudifyManager:
          target: Ansible4CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - Ansible4CloudifyManager_configured
        AWSHostpoolFeeder_configured:
          target: AWSHostpoolFeeder
          activities:
            - set_state: configured
          on_success:
            - AWSHostpoolFeeder_starting
        CloudifyCollector_initial:
          target: CloudifyCollector
          activities:
            - set_state: initial
          on_success:
            - CloudifyCollector_creating
        RabbitmqCollector_initial:
          target: RabbitmqCollector
          activities:
            - set_state: initial
          on_success:
            - RabbitmqCollector_creating
        Ansible4CloudifyManager_starting:
          target: Ansible4CloudifyManager
          activities:
            - set_state: starting
          on_success:
            - start_Ansible4CloudifyManager
        Ansible4CloudifyManager_initial:
          target: Ansible4CloudifyManager
          activities:
            - set_state: initial
          on_success:
            - Ansible4CloudifyManager_creating
        HostPool_started:
          target: HostPool
          activities:
            - set_state: started
          on_success:
            - AWSHostpoolFeeder_configuring
            - CloudifyHostpoolCollector_configuring
        GrafanaService_install:
          target: GrafanaService
          activities:
            - delegate: install
          on_success:
            - dmdCfy_initial
        _CfyCompute_install:
          target: _CfyCompute
          activities:
            - delegate: install
          on_success:
            - HostPool_initial
            - AWSHostpoolFeeder_initial
            - dmdCfy_initial
            - CloudifyManager_initial
            - Ansible4CloudifyManager_initial
        CloudifyHostpoolCollector_starting:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: starting
          on_success:
            - start_CloudifyHostpoolCollector
        configure_CloudifyAwsConfiguration:
          target: CloudifyAwsConfiguration
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - CloudifyAwsConfiguration_configured
        HostPool_configuring:
          target: HostPool
          activities:
            - set_state: configuring
          on_success:
            - configure_HostPool
        HostPool_configured:
          target: HostPool
          activities:
            - set_state: configured
          on_success:
            - HostPool_starting
        AWSHostpoolFeeder_creating:
          target: AWSHostpoolFeeder
          activities:
            - set_state: creating
          on_success:
            - AWSHostpoolFeeder_created
        start_CloudifyManager:
          target: CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - CloudifyManager_started
        create_Ansible4CloudifyManager:
          target: Ansible4CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on_success:
            - Ansible4CloudifyManager_created
        CloudifyCollector_configuring:
          target: CloudifyCollector
          activities:
            - set_state: configuring
          on_success:
            - configure_CloudifyCollector
        CloudifyHostpoolCollector_configured:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: configured
          on_success:
            - CloudifyHostpoolCollector_starting
        configure_CloudifyManager:
          target: CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - CloudifyManager_configured
        CloudifyManager_started:
          target: CloudifyManager
          activities:
            - set_state: started
          on_success:
            - CloudifyAwsConfiguration_initial
            - RabbitmqCollector_configuring
            - CloudifyCollector_configuring
        dmdCfy_configured:
          target: dmdCfy
          activities:
            - set_state: configured
          on_success:
            - dmdCfy_starting
        configure_dmdCfy:
          target: dmdCfy
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - dmdCfy_configured
        configure_CloudifyCollector:
          target: CloudifyCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - CloudifyCollector_configured
        configure_CloudifyHostpoolCollector:
          target: CloudifyHostpoolCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - CloudifyHostpoolCollector_configured
        create_HostPool:
          target: HostPool
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on_success:
            - HostPool_created
        CloudifyCollector_configured:
          target: CloudifyCollector
          activities:
            - set_state: configured
          on_success:
            - CloudifyCollector_starting
        RabbitmqCollector_configuring:
          target: RabbitmqCollector
          activities:
            - set_state: configuring
          on_success:
            - configure_RabbitmqCollector
        CloudifyManager_initial:
          target: CloudifyManager
          activities:
            - set_state: initial
          on_success:
            - CloudifyManager_creating
        Ansible4CloudifyManager_creating:
          target: Ansible4CloudifyManager
          activities:
            - set_state: creating
          on_success:
            - create_Ansible4CloudifyManager
        CloudifyHostpoolCollector_configuring:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: configuring
          on_success:
            - configure_CloudifyHostpoolCollector
        create_dmdCfy:
          target: dmdCfy
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on_success:
            - dmdCfy_created
        dmdCfy_configuring:
          target: dmdCfy
          activities:
            - set_state: configuring
          on_success:
            - configure_dmdCfy
        dmdCfy_creating:
          target: dmdCfy
          activities:
            - set_state: creating
          on_success:
            - create_dmdCfy
        CloudifyManager_creating:
          target: CloudifyManager
          activities:
            - set_state: creating
          on_success:
            - create_CloudifyManager
        configure_RabbitmqCollector:
          target: RabbitmqCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - RabbitmqCollector_configured
        dmdCfy_initial:
          target: dmdCfy
          activities:
            - set_state: initial
          on_success:
            - dmdCfy_creating
        RabbitmqCollector_started:
          target: RabbitmqCollector
          activities:
            - set_state: started
          on_success:
            - AWSHostpoolFeeder_initial
        configure_AWSHostpoolFeeder:
          target: AWSHostpoolFeeder
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on_success:
            - AWSHostpoolFeeder_configured
        start_dmdCfy:
          target: dmdCfy
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - dmdCfy_started
        dmdCfy_started:
          target: dmdCfy
          activities:
            - set_state: started
          on_success:
            - CloudifyHostpoolCollector_initial
            - CloudifyCollector_initial
            - RabbitmqCollector_initial
            - CloudifyManager_initial
    uninstall:
      steps:
        Compute_uninstall:
          target: _CfyCompute
          activities:
            - delegate: uninstall
        CloudifyManager_stopping:
          target: CloudifyManager
          activities:
            - set_state: stopping
          on_success:
            - stop_CloudifyManager
        stop_CloudifyManager:
          target: CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - CloudifyManager_stopped
        CloudifyManager_stopped:
          target: CloudifyManager
          activities:
            - set_state: stopped
          on_success:
            - CloudifyManager_deleting
        CloudifyManager_deleting:
          target: CloudifyManager
          activities:
            - set_state: deleting
          on_success:
            - delete_CloudifyManager
        delete_CloudifyManager:
          target: CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - CloudifyManager_deleted
        CloudifyManager_deleted:
          target: CloudifyManager
          activities:
            - set_state: deleted
          on_success:
            - Compute_uninstall
            - CloudifyCollector_deleting
            - DiamondLinuxAgent_stopping
        CloudifyAwsConfiguration_stopping:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: stopping
          on_success:
            - stop_CloudifyAwsConfiguration
        stop_CloudifyAwsConfiguration:
          target: CloudifyAwsConfiguration
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - CloudifyAwsConfiguration_stopped
        CloudifyAwsConfiguration_stopped:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: stopped
          on_success:
            - CloudifyAwsConfiguration_deleting
        CloudifyAwsConfiguration_deleting:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: deleting
          on_success:
            - delete_CloudifyAwsConfiguration
        delete_CloudifyAwsConfiguration:
          target: CloudifyAwsConfiguration
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - CloudifyAwsConfiguration_deleted
        CloudifyAwsConfiguration_deleted:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: deleted
          on_success:
            - DiamondLinuxAgent_stopping
            - CloudifyManager_stopping
        Ansible4CloudifyManager_stopping:
          target: Ansible4CloudifyManager
          activities:
            - set_state: stopping
          on_success:
            - stop_Ansible4CloudifyManager
        stop_Ansible4CloudifyManager:
          target: Ansible4CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - Ansible4CloudifyManager_stopped
        Ansible4CloudifyManager_stopped:
          target: Ansible4CloudifyManager
          activities:
            - set_state: stopped
          on_success:
            - Ansible4CloudifyManager_deleting
        Ansible4CloudifyManager_deleting:
          target: Ansible4CloudifyManager
          activities:
            - set_state: deleting
          on_success:
            - delete_Ansible4CloudifyManager
        delete_Ansible4CloudifyManager:
          target: Ansible4CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - Ansible4CloudifyManager_deleted
        Ansible4CloudifyManager_deleted:
          target: Ansible4CloudifyManager
          activities:
            - set_state: deleted
          on_success:
            - Compute_uninstall
            - CloudifyAwsConfiguration_stopping
        HostPool_stopping:
          target: HostPool
          activities:
            - set_state: stopping
          on_success:
            - stop_HostPool
        stop_HostPool:
          target: HostPool
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - HostPool_stopped
        HostPool_stopped:
          target: HostPool
          activities:
            - set_state: stopped
          on_success:
            - HostPool_deleting
        HostPool_deleting:
          target: HostPool
          activities:
            - set_state: deleting
          on_success:
            - delete_HostPool
        delete_HostPool:
          target: HostPool
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - HostPool_deleted
        HostPool_deleted:
          target: HostPool
          activities:
            - set_state: deleted
          on_success:
            - Compute_uninstall
            - Ansible4CloudifyManager_stopping
        AWSHostpoolFeeder_stopping:
          target: AWSHostpoolFeeder
          activities:
            - set_state: stopping
          on_success:
            - stop_AWSHostpoolFeeder
        stop_AWSHostpoolFeeder:
          target: AWSHostpoolFeeder
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - AWSHostpoolFeeder_stopped
        AWSHostpoolFeeder_stopped:
          target: AWSHostpoolFeeder
          activities:
            - set_state: stopped
          on_success:
            - HostPool_stopping
            - AWSHostpoolFeeder_deleting
        AWSHostpoolFeeder_deleting:
          target: AWSHostpoolFeeder
          activities:
            - set_state: deleting
          on_success:
            - delete_AWSHostpoolFeeder
        delete_AWSHostpoolFeeder:
          target: AWSHostpoolFeeder
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - AWSHostpoolFeeder_deleted
        AWSHostpoolFeeder_deleted:
          target: AWSHostpoolFeeder
          activities:
            - set_state: deleted
          on_success:
            - Compute_uninstall
            - HostPool_stopping
        DiamondLinuxAgent_stopping:
          target: dmdCfy
          activities:
            - set_state: stopping
          on_success:
            - stop_DiamondLinuxAgent
        stop_DiamondLinuxAgent:
          target: dmdCfy
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - DiamondLinuxAgent_stopped
        DiamondLinuxAgent_stopped:
          target: dmdCfy
          activities:
            - set_state: stopped
          on_success:
            - DiamondLinuxAgent_deleting
        DiamondLinuxAgent_deleting:
          target: dmdCfy
          activities:
            - set_state: deleting
          on_success:
            - delete_DiamondLinuxAgent
        delete_DiamondLinuxAgent:
          target: dmdCfy
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - DiamondLinuxAgent_deleted
        DiamondLinuxAgent_deleted:
          target: dmdCfy
          activities:
            - set_state: deleted
          on_success:
            - GraphiteService_uninstall
            - Compute_uninstall
            - GrafanaService_uninstall
        GrafanaService_uninstall:
          target: GrafanaService
          activities:
            - delegate: uninstall
        GraphiteService_uninstall:
          target: GraphiteService
          activities:
            - delegate: uninstall
        CloudifyCollector_stopping:
          target: CloudifyCollector
          activities:
            - set_state: stopping
          on_success:
            - stop_CloudifyCollector
        stop_CloudifyCollector:
          target: CloudifyCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - CloudifyCollector_stopped
        CloudifyCollector_stopped:
          target: CloudifyCollector
          activities:
            - set_state: stopped
          on_success:
            - CloudifyCollector_deleting
            - CloudifyManager_stopping
        CloudifyCollector_deleting:
          target: CloudifyCollector
          activities:
            - set_state: deleting
          on_success:
            - delete_CloudifyCollector
        delete_CloudifyCollector:
          target: CloudifyCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - CloudifyCollector_deleted
        CloudifyCollector_deleted:
          target: CloudifyCollector
          activities:
            - set_state: deleted
          on_success:
            - DiamondLinuxAgent_stopping
        RabbitmqCollector_stopping:
          target: RabbitmqCollector
          activities:
            - set_state: stopping
          on_success:
            - stop_RabbitmqCollector
        stop_RabbitmqCollector:
          target: RabbitmqCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - RabbitmqCollector_stopped
        RabbitmqCollector_stopped:
          target: RabbitmqCollector
          activities:
            - set_state: stopped
          on_success:
            - RabbitmqCollector_deleting
            - CloudifyManager_stopping
        RabbitmqCollector_deleting:
          target: RabbitmqCollector
          activities:
            - set_state: deleting
          on_success:
            - delete_RabbitmqCollector
        delete_RabbitmqCollector:
          target: RabbitmqCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - RabbitmqCollector_deleted
        RabbitmqCollector_deleted:
          target: RabbitmqCollector
          activities:
            - set_state: deleted
          on_success:
            - DiamondLinuxAgent_stopping
        CloudifyHostpoolCollector_stopping:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: stopping
          on_success:
            - stop_CloudifyHostpoolCollector
        stop_CloudifyHostpoolCollector:
          target: CloudifyHostpoolCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - CloudifyHostpoolCollector_stopped
        CloudifyHostpoolCollector_stopped:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: stopped
          on_success:
            - HostPool_stopping
            - CloudifyHostpoolCollector_deleting
        CloudifyHostpoolCollector_deleting:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: deleting
          on_success:
            - delete_CloudifyHostpoolCollector
        delete_CloudifyHostpoolCollector:
          target: CloudifyHostpoolCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on_success:
            - CloudifyHostpoolCollector_deleted
        CloudifyHostpoolCollector_deleted:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: deleted
          on_success:
            - DiamondLinuxAgent_stopping
    start:
      steps:
        Ansible4CloudifyManager_started:
          target: Ansible4CloudifyManager
          activities:
            - set_state: started
        CloudifyManager_started:
          target: CloudifyManager
          activities:
            - set_state: started
          on_success:
            - RabbitmqCollector_starting
            - CloudifyCollector_starting
            - CloudifyAwsConfiguration_starting
            - HostPool_starting
        CloudifyManager_starting:
          target: CloudifyManager
          activities:
            - set_state: starting
          on_success:
            - start_CloudifyManager
        start_Ansible4CloudifyManager:
          target: Ansible4CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - Ansible4CloudifyManager_started
        Ansible4CloudifyManager_starting:
          target: Ansible4CloudifyManager
          activities:
            - set_state: starting
          on_success:
            - start_Ansible4CloudifyManager
        start_CloudifyAwsConfiguration:
          target: CloudifyAwsConfiguration
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - CloudifyAwsConfiguration_started
        CloudifyAwsConfiguration_starting:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: starting
          on_success:
            - start_CloudifyAwsConfiguration
        CloudifyAwsConfiguration_started:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: started
        start_CloudifyManager:
          target: CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - CloudifyManager_started
        CFY_Compute_start:
          target: _CfyCompute
          activities:
            - delegate: start
          on_success:
            - AWSHostpoolFeeder_starting
            - CloudifyManager_starting
            - Ansible4CloudifyManager_starting
            - HostPool_starting
            - DiamondLinuxAgent_starting
        HostPool_starting:
          target: HostPool
          activities:
            - set_state: starting
          on_success:
            - start_HostPool
        start_HostPool:
          target: HostPool
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - HostPool_started
        HostPool_started:
          target: HostPool
          activities:
            - set_state: started
          on_success:
            - CloudifyHostpoolCollector_starting
            - AWSHostpoolFeeder_starting
        AWSHostpoolFeeder_starting:
          target: AWSHostpoolFeeder
          activities:
            - set_state: starting
          on_success:
            - start_AWSHostpoolFeeder
        start_AWSHostpoolFeeder:
          target: AWSHostpoolFeeder
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - AWSHostpoolFeeder_started
        AWSHostpoolFeeder_started:
          target: AWSHostpoolFeeder
          activities:
            - set_state: started
        DiamondLinuxAgent_starting:
          target: dmdCfy
          activities:
            - set_state: starting
          on_success:
            - start_DiamondLinuxAgent
        start_DiamondLinuxAgent:
          target: dmdCfy
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - DiamondLinuxAgent_started
        DiamondLinuxAgent_started:
          target: dmdCfy
          activities:
            - set_state: started
          on_success:
            - RabbitmqCollector_starting
            - CloudifyHostpoolCollector_starting
            - CloudifyManager_starting
            - CloudifyCollector_starting
            - HostPool_starting
        GrafanaService_start:
          target: GrafanaService
          activities:
            - delegate: start
          on_success:
            - DiamondLinuxAgent_starting
        GraphiteService_start:
          target: GraphiteService
          activities:
            - delegate: start
          on_success:
            - DiamondLinuxAgent_starting
        CloudifyCollector_starting:
          target: CloudifyCollector
          activities:
            - set_state: starting
          on_success:
            - start_CloudifyCollector
        start_CloudifyCollector:
          target: CloudifyCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - CloudifyCollector_started
        CloudifyCollector_started:
          target: CloudifyCollector
          activities:
            - set_state: started
        RabbitmqCollector_starting:
          target: RabbitmqCollector
          activities:
            - set_state: starting
          on_success:
            - start_RabbitmqCollector
        start_RabbitmqCollector:
          target: RabbitmqCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - RabbitmqCollector_started
        RabbitmqCollector_started:
          target: RabbitmqCollector
          activities:
            - set_state: started
        CloudifyHostpoolCollector_starting:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: starting
          on_success:
            - start_CloudifyHostpoolCollector
        start_CloudifyHostpoolCollector:
          target: CloudifyHostpoolCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on_success:
            - CloudifyHostpoolCollector_started
        CloudifyHostpoolCollector_started:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: started
    stop:
      steps:
        CloudifyAwsConfiguration_stopping:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: stopping
          on_success:
            - stop_CloudifyAwsConfiguration
        stop_CloudifyAwsConfiguration:
          target: CloudifyAwsConfiguration
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - CloudifyAwsConfiguration_stopped
        stop_Ansible4CloudifyManager:
          target: Ansible4CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - Ansible4CloudifyManager_stopped
        Ansible4CloudifyManager_stopped:
          target: Ansible4CloudifyManager
          activities:
            - set_state: stopped
          on_success:
            - CFY_Compute_stop
        Ansible4CloudifyManager_stopping:
          target: Ansible4CloudifyManager
          activities:
            - set_state: stopping
          on_success:
            - stop_Ansible4CloudifyManager
        stop_CloudifyManager:
          target: CloudifyManager
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - CloudifyManager_stopped
        CloudifyManager_stopping:
          target: CloudifyManager
          activities:
            - set_state: stopping
          on_success:
            - stop_CloudifyManager
        CFY_Compute_stop:
          target: _CfyCompute
          activities:
            - delegate: stop
        CloudifyManager_stopped:
          target: CloudifyManager
          activities:
            - set_state: stopped
          on_success:
            - DiamondLinuxAgent_stopping
            - CFY_Compute_stop
            - AWSHostpoolFeeder_stopping
        CloudifyAwsConfiguration_stopped:
          target: CloudifyAwsConfiguration
          activities:
            - set_state: stopped
          on_success:
            - CloudifyManager_stopping
        HostPool_stopping:
          target: HostPool
          activities:
            - set_state: stopping
          on_success:
            - stop_HostPool
        stop_HostPool:
          target: HostPool
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - HostPool_stopped
        HostPool_stopped:
          target: HostPool
          activities:
            - set_state: stopped
          on_success:
            - CloudifyAwsConfiguration_stopping
            - CFY_Compute_stop
        AWSHostpoolFeeder_stopping:
          target: AWSHostpoolFeeder
          activities:
            - set_state: stopping
          on_success:
            - stop_AWSHostpoolFeeder
        stop_AWSHostpoolFeeder:
          target: AWSHostpoolFeeder
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - AWSHostpoolFeeder_stopped
        AWSHostpoolFeeder_stopped:
          target: AWSHostpoolFeeder
          activities:
            - set_state: stopped
          on_success:
            - DiamondLinuxAgent_stopping
            - CFY_Compute_stop
        DiamondLinuxAgent_stopping:
          target: dmdCfy
          activities:
            - set_state: stopping
          on_success:
            - stop_DiamondLinuxAgent
        stop_DiamondLinuxAgent:
          target: dmdCfy
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - DiamondLinuxAgent_stopped
        DiamondLinuxAgent_stopped:
          target: dmdCfy
          activities:
            - set_state: stopped
          on_success:
            - GraphiteService_stop
            - CFY_Compute_stop
            - GrafanaService_stop
        GrafanaService_stop:
          target: GrafanaService
          activities:
            - delegate: stop
        GraphiteService_stop:
          target: GraphiteService
          activities:
            - delegate: stop
        CloudifyCollector_stopping:
          target: CloudifyCollector
          activities:
            - set_state: stopping
          on_success:
            - stop_CloudifyCollector
        stop_CloudifyCollector:
          target: CloudifyCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - CloudifyCollector_stopped
        CloudifyCollector_stopped:
          target: CloudifyCollector
          activities:
            - set_state: stopped
          on_success:
            - DiamondLinuxAgent_stopping
        RabbitmqCollector_stopping:
          target: RabbitmqCollector
          activities:
            - set_state: stopping
          on_success:
            - stop_RabbitmqCollector
        stop_RabbitmqCollector:
          target: RabbitmqCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - RabbitmqCollector_stopped
        RabbitmqCollector_stopped:
          target: RabbitmqCollector
          activities:
            - set_state: stopped
          on_success:
            - DiamondLinuxAgent_stopping
        CloudifyHostpoolCollector_stopping:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: stopping
          on_success:
            - stop_CloudifyHostpoolCollector
        stop_CloudifyHostpoolCollector:
          target: CloudifyHostpoolCollector
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on_success:
            - CloudifyHostpoolCollector_stopped
        CloudifyHostpoolCollector_stopped:
          target: CloudifyHostpoolCollector
          activities:
            - set_state: stopped
          on_success:
            - DiamondLinuxAgent_stopping
