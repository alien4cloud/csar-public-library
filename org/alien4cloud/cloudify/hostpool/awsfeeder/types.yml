tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.cloudify.hostpool.awsfeeder
  template_version: 2.2.0-SNAPSHOT
  template_author: alien4cloud

# build command:
# cd playbook && rm -f playbook.ansible && zip -r playbook.ansible * && cd .. && rm -f stuff.zip && zip -r stuff.zip *

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:2.2.0-SM9
  - org.alien4cloud.cloudify.hostpool.pub:2.2.0-SNAPSHOT

node_types:
  org.alien4cloud.cloudify.hostpool.awsfeeder.nodes.AWSHostpoolFeeder:
    derived_from: tosca.nodes.SoftwareComponent
    description: |
      Feed a hostpool with many instanciated EC2 instances.
      You can use custom commands to populate and clear the host pool and EC2.
      You can share EC2 instances between several Hostpool hosts (if host_per_instance > 1). Ideal for isolated and compatibles components, load tests, or containers but just understand it will be a colloc ;)
      Hostpool is cleared and instances are stopped at Standard.stop operation.
      TODO: add tags
    metadata:
      icon: images/aws.png
    properties:
      aws_access_key:
        type: string
        required: true
        description: The AWS access key
      aws_secret_key:
        type: string
        required: true
        description: The AWS secret key
      key_name:
        type: string
        required: true
        description: The AWS key name
      key_content:
        type: string
        required: true
        description: The AWS key
      region:
        type: string
        required: false
        description: The region where to start instances
        default: eu-west-1
      instance_groups:
        type: string
        required: true
        description: Security groups the instances will be associated with
      instance_username:
        type: string
        required: true
        default: ubuntu
        constraints:
          - valid_values: [ "ubuntu", "ec2-user" ]
        description: The user to use to connect to the instance
      instance_type:
        type: string
        required: true
        default: t2.nano
        constraints:
          - valid_values: [ "t2.nano", "t2.small", "t2.medium", "m4.large", "c4.8xlarge" ]
        description: The AWS instance type
      instance_image:
        type: string
        required: true
        constraints:
          - valid_values: [ "ami-4c4b003b", "ami-47a23a30" ]
        default: ami-47a23a30
        description: The AWS ami (Centos:4c or Ubuntu:47)
      instance_count:
        type: integer
        required: true
        default: 1
        description: Number of instances to start
      host_per_instance:
        type: integer
        required: true
        default: 1
        description: Number of host to declare in hostpool per EC2 instance
      instance_name:
        type: string
        required: true
        default: HostpoolInstance
        description: The AWS instance name
      instance_os:
        type: string
        required: true
        default: linux
        description: The instance os for hostpool config
        constraints:
          - valid_values: [ "linux", "windows" ]
    attributes:
      # To be defined in connect op
      hostpool_url: { get_property: [SELF, instance_name]}
    requirements:
      - hostpool:
          capability: org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
          relationship: org.alien4cloud.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool
          occurrences: [1, 1]
    interfaces:
      Standard:
        stop:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: stop.yml
            aws_access_key: { get_property: [SELF, aws_access_key]}
            aws_secret_key: { get_property: [SELF, aws_secret_key]}
            key_name: { get_property: [SELF, key_name]}
            key_content: { get_property: [SELF, key_content]}
            region: { get_property: [SELF, region]}
            instance_name: { get_property: [SELF, instance_name]}
            instance_count: { get_property: [SELF, instance_count]}
            # hostpool_url: { concat: [get_property: [TARGET, cloudify_hostpool, protocol], "://", get_attribute: [TARGET, public_ip_address], ":", get_property: [TARGET, cloudify_hostpool, port]] }
          implementation: playbook/playbook.ansible
      org.alien4cloud.cloudify.hostpool.awsfeeder.Admin:
        clear:
          description: |
            Clear Hostpool from all it's entries and shutdown related EC2 instances.
            The 'instance_name' property is used to detect and stop EC2 instances.
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: stop.yml
            aws_access_key: { get_property: [SELF, aws_access_key] }
            aws_secret_key: { get_property: [SELF, aws_secret_key] }
            key_name: { get_property: [SELF, key_name] }
            key_content: { get_property: [SELF, key_content] }
            region: { get_property: [SELF, region] }
            instance_name: { get_property: [SELF, instance_name] }
            instance_count: { get_property: [SELF, instance_count] }
            # hostpool_url: { get_attribute: [SELF, hostpool_url }
          implementation: playbook/playbook.ansible
        feed:
          description: |
            Start EC2 instances and populate Hostpool.
            The node properties are used for instance properties and count.
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: feed.yml
            aws_access_key: { get_property: [SELF, aws_access_key] }
            aws_secret_key: { get_property: [SELF, aws_secret_key] }
            key_name: { get_property: [SELF, key_name] }
            key_content: { get_property: [SELF, key_content] }
            region: { get_property: [SELF, region] }
            instance_name: { get_property: [SELF, instance_name] }
            instance_count: { get_property: [SELF, instance_count] }
            host_per_instance: { get_property: [SELF, host_per_instance] }
            instance_username: { get_property: [SELF, instance_username] }
            instance_groups: { get_property: [SELF, instance_groups] }
            instance_image: { get_property: [SELF, instance_image] }
            instance_type: { get_property: [SELF, instance_type] }
            instance_os: { get_property: [SELF, instance_os] }
            # hostpool_url: { get_attribute: [SELF, hostpool_url }
          implementation: playbook/playbook.ansible
        feed_custom:
          description: |
            Start EC2 instances and populate Hostpool.
            The node properties are used for instance properties and count.
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: feed.yml
            aws_access_key: { get_property: [SELF, aws_access_key] }
            aws_secret_key: { get_property: [SELF, aws_secret_key] }
            key_name: { get_property: [SELF, key_name] }
            key_content: { get_property: [SELF, key_content] }
            region: { get_property: [SELF, region] }
            instance_os: { get_property: [SELF, instance_os] }
            instance_groups: { get_property: [SELF, instance_groups] }
            instance_count:
              type: integer
              required: true
              default: 1
            instance_username:
              type: string
              required: true
              default: ubuntu
              constraints:
                - valid_values: [ "ubuntu", "ec2-user" ]
              description: The user to use to connect to the instance
            instance_type:
              type: string
              required: true
              default: t2.nano
              constraints:
                - valid_values: [ "t2.nano", "t2.small", "t2.medium", "m4.large", "c4.8xlarge" ]
              description: The AWS instance type
            instance_image:
              type: string
              required: true
              constraints:
                - valid_values: [ "ami-4c4b003b", "ami-47a23a30" ]
              default: ami-47a23a30
              description: The AWS ami (Centos:4c or Ubuntu:47)
            host_per_instance:
              type: integer
              required: true
              default: 1
              description: Number of host to declare in hostpool per EC2 instance
            instance_name:
              type: string
              required: true
              default: HostpoolInstance
              description: The AWS instance name
          implementation: playbook/playbook.ansible

relationship_types:
  org.alien4cloud.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi ]
    interfaces:
      Configure:
        add_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: hostpool_connected.yml
            aws_access_key: { get_property: [SOURCE, aws_access_key] }
            aws_secret_key: { get_property: [SOURCE, aws_secret_key] }
            key_name: { get_property: [SOURCE, key_name] }
            key_content: { get_property: [SOURCE, key_content] }
            region: { get_property: [SOURCE, region] }
            instance_name: { get_property: [SOURCE, instance_name] }
            instance_count: { get_property: [SOURCE, instance_count] }
            host_per_instance: { get_property: [SOURCE, host_per_instance] }
            instance_username: { get_property: [SOURCE, instance_username] }
            instance_groups: { get_property: [SOURCE, instance_groups] }
            instance_image: { get_property: [SOURCE, instance_image] }
            instance_type: { get_property: [SOURCE, instance_type] }
            instance_os: { get_property: [SOURCE, instance_os] }
            hostpool_url: { concat: [get_property: [TARGET, cloudify_hostpool, protocol], "://", get_attribute: [TARGET, cloudify_hostpool, ip_address], ":", get_property: [TARGET, cloudify_hostpool, port]] }
          implementation: playbook/playbook.ansible
